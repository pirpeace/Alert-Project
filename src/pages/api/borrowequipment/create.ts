import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';

export default async function handle(req: NextApiRequest, res: NextApiResponse) {
    if (req.method === 'POST') {
        try {
            const body = req.body;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            if (!body.borrow_date || !body.borrow_return || !body.borrow_user_id ||
                !body.borrow_address || !body.borrow_tel || !body.borrow_objective ||
                !body.borrow_name || !body.borrow_list || body.borrow_list.length === 0) {
                return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            const borrowequipment = await prisma.borrowequipment.create({
                data: {
                    borrow_date          : new Date(body.borrow_date),
                    borrow_return        : new Date(body.borrow_return),
                    borrow_user_id       : body.borrow_user_id,
                    borrow_address       : body.borrow_address,
                    borrow_tel           : body.borrow_tel,
                    borrow_objective     : body.borrow_objective,
                    borrow_name          : body.borrow_name,
                    borrow_create_date   : new Date(),
                    borrow_update_date   : new Date(),
                    borrow_update_user_id: body.borrow_user_id,
                },
            });

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏•‡∏á‡πÉ‡∏ô borrowequipment_list ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            if (borrowequipment) {
                for (const item of body.borrow_list) {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    const equipment = await prisma.equipment.findUnique({
                        where: { equipment_id: item.equipment_id }
                    });

                    if (!equipment) {
                        return res.status(400).json({ message: `‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ID ${item.equipment_id} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö` });
                    }

                    await prisma.borrowequipment_list.create({
                        data: {
                            borrow_id: borrowequipment.borrow_id,
                            equipment_id: item.equipment_id,
                        }
                    });

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß" (0 = Borrowed)
                    await prisma.equipment.update({
                        where: { equipment_id: item.equipment_id },
                        data: { equipment_status: 0 }
                    });
                }
            }

            return res.status(200).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        } catch (error) {
            console.error("üöÄ ~ handle ~ error:", error);
            return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data: error });
        }
    } else {
        res.setHeader('Allow', ['POST']);
        return res.status(405).json({ message: `‡∏ß‡∏¥‡∏ò‡∏µ ${req.method} ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï` });
    }
}
